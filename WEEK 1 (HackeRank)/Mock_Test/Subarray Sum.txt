//Subarray Sum
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

/*
 * Complete the 'findSum' function below.
 *
 * The function is expected to return a LONG_INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY numbers
 *  2. 2D_INTEGER_ARRAY queries
 */
long* findSum(int numbers_count, int* numbers, int queries_rows, int queries_columns, int** queries, int* result_count) {
    *result_count = queries_rows;
    long* result = malloc(queries_rows * sizeof(long));

    // Prefix sums for array values
    long* prefixSum = malloc((numbers_count + 1) * sizeof(long));
    // Prefix sums for zero counts
    int* prefixZero = malloc((numbers_count + 1) * sizeof(int));

    prefixSum[0] = 0;
    prefixZero[0] = 0;

    for (int i = 1; i <= numbers_count; i++) {
        prefixSum[i] = prefixSum[i - 1] + numbers[i - 1];
        prefixZero[i] = prefixZero[i - 1] + (numbers[i - 1] == 0 ? 1 : 0);
    }

    for (int i = 0; i < queries_rows; i++) {
        int l = queries[i][0];
        int r = queries[i][1];
        int x = queries[i][2];

        long sumRange = prefixSum[r] - prefixSum[l - 1];
        int zeroCount = prefixZero[r] - prefixZero[l - 1];

        result[i] = sumRange + (long)zeroCount * x;
    }

    free(prefixSum);
    free(prefixZero);

    return result;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int numbers_count = parse_int(ltrim(rtrim(readline())));
    int* numbers = malloc(numbers_count * sizeof(int));

    for (int i = 0; i < numbers_count; i++) {
        int numbers_item = parse_int(ltrim(rtrim(readline())));
        *(numbers + i) = numbers_item;
    }

    int queries_rows = parse_int(ltrim(rtrim(readline())));
    int queries_columns = parse_int(ltrim(rtrim(readline())));

    int** queries = malloc(queries_rows * sizeof(int*));

    for (int i = 0; i < queries_rows; i++) {
        *(queries + i) = malloc(queries_columns * (sizeof(int)));
        char** queries_item_temp = split_string(rtrim(readline()));

        for (int j = 0; j < queries_columns; j++) {
            int queries_item = parse_int(*(queries_item_temp + j));
            *(*(queries + i) + j) = queries_item;
        }
    }

    int result_count;
    long* result = findSum(numbers_count, numbers, queries_rows, queries_columns, queries, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%ld", *(result + i));
        if (i != result_count - 1) {
            fprintf(fptr, "\n");
        }
    }

    fprintf(fptr, "\n");
    fclose(fptr);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }
        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) {
            data = '\0';
            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);
        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }
    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }
    if (!*str) {
        return str;
    }
    while (*str != '\0' && isspace(*str)) {
        str++;
    }
    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }
    if (!*str) {
        return str;
    }
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) {
        end--;
    }
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) {
            return splits;
        }
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }
    return value;
}