/*Given a square matrix, calculate the absolute difference between the sums of its diagonals.

For example, the square matrix arr is shown below.
1 2 3
4 5 6
9 8 9
The left-to-right diagonal 1+5+9 15. The right to left diagonal = 3+5+9=17. Their absolute difference is |15-17=2|

Function description
Complete the diagonalDifference function in the editor below.
diagonal Difference takes the following parameter:
int arr[n][m]: an array of integers

Return
int: the absolute diagonal difference

Input Format

The first line contains a single integer, n. the number of rows and columns in the square matrix arr. Each of the next a lines describes a row, arr[i], and consists of n space-separated integers arr[i][

Constraints

-100 ≤ arr[i][j]≤100

Output Format

Return the absolute difference between the sums of the matrix's two diagonals as a single integer.

Sample Input
3
11  2  4
4 5 6
10 8-12

Sample Output
15

Explanation
The primary diagonal is:

11
       5
          -12

Sum across the primary diagonal: 11 +5-12=4

The secondary diagonal is:
              4
       5
  10
Sum across the primary diagonal: 4+5+10 =19
Difference: |4-19| =15
Note: |x| is the absolute value of x
------------------------------------>C

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

/*
 * Complete the 'diagonalDifference' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts 2D_INTEGER_ARRAY arr as parameter.
 */

int diagonalDifference(int arr_rows, int arr_columns, int** arr) {
    /*TYPE-1
    int PrimaryDiagonal=0, SecondaryDiagonal=0;
    for(int i=0;i<arr_rows;i++){
        for(int j=0;j<arr_columns;j++){
            if (i==j){
                PrimaryDiagonal=PrimaryDiagonal+arr[i][j];
            }
        }
        SecondaryDiagonal+=arr[i][arr_columns-i-1];
    }
return abs(PrimaryDiagonal-SecondaryDiagonal);*/
int PrimaryDiagonal=0, SecondaryDiagonal=0;
    for(int i=0;i<arr_rows;i++){
        PrimaryDiagonal=PrimaryDiagonal+arr[i][i];
        SecondaryDiagonal=SecondaryDiagonal+arr[i][arr_columns-i-1];
    }
    return abs(PrimaryDiagonal-SecondaryDiagonal);

}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int n = parse_int(ltrim(rtrim(readline())));

    int** arr = malloc(n * sizeof(int*));

    for (int i = 0; i < n; i++) {
        *(arr + i) = malloc(n * (sizeof(int)));

        char** arr_item_temp = split_string(rtrim(readline()));

        for (int j = 0; j < n; j++) {
            int arr_item = parse_int(*(arr_item_temp + j));

            *(*(arr + i) + j) = arr_item;
        }
    }

    int result = diagonalDifference(n, n, arr);

    fprintf(fptr, "%d\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);

        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
----->