/*There are two n-element arrays of integers, A and B. Permute them into some A' and B' such that the relation A' [i] + B'[i]>=k holds for all i where 0 <= i < n 
There will be q queries consisting of A, B, and k. For each query, return YES if some permutation A', B' satisfying the relation exists. Otherwise, return NO.
Example
A = [0, 1]
B = [0, 2]
k = 1
A valid A', B' is A' = [1, 0] and B' = [0, 2] : 1 + 0 >= 1 and 0 + 2 >= 1 Return YES. 
Function Description
Complete the twoArrays function in the editor below. It should return a string, either YES or NO.
twoArrays has the following parameter(s):
int k: an integer
int A[n]: an array of integers
int B[n]: an array of integers
Returns
string: either YES or NO
Input Format
The first line contains an integer q, the number of queries.
The next q sets of 3 lines are as follows:
The first line contains two space-separated integers n and k, the size of both arrays A and B, and the relation variable. 
The second line contains n space-separated integers A[i] . 
The third line contains n space-separated integers B[i]

Constraints
1 <= q <= 10
1 <= n <= 1000
1 <= k <= 10 ^ 9
0 <= A[i] B[i] <= 10 ^ 9

Sample Input
STDIN                          Function
2                                   q = 2
3 10                            A[] and B[] size n = 3 k = 10
2 1 3                            A = [2, 1, 3]
7 8 9                         B = [7, 8, 9]
4 5                            A[] and B[] size n = 4 , k = 5
1 2 2 1                      A = [1, 2, 2, 1]
3 3 3 4                      B = [3, 3, 3, 4]
Sample Output
YES
NO
Explanation
There are two queries:
1. Permute these into A' = [1, 2, 3] and B' = [9, 8, 7] so that the following statements are true:
A[0] + B[0] = 1 + 9 = 10 >= k
A[1] + B[1] = 2 + 8 = 10 >= k
A[2] + B[2] = 3 + 7 = 10 >= k
2. A = [1, 2, 2, 1] B = [3, 3, 3, 4] and k = 5 To permute A and B into a valid A' and B', there must be at least three numbers in A that are greater than 1.*/
-------------------->C
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

/*
 * Complete the 'twoArrays' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts following parameters:
 *  1. INTEGER k
 *  2. INTEGER_ARRAY A
 *  3. INTEGER_ARRAY B
 */

/*
 * To return the string from the function, you should either do static allocation or dynamic allocation
 *
 * For example,
 * char* return_string_using_static_allocation() {
 *     static char s[] = "static allocation of string";
 *
 *     return s;
 * }
 *
 * char* return_string_using_dynamic_allocation() {
 *     char* s = malloc(100 * sizeof(char));
 *
 *     s = "dynamic allocation of string";
 *
 *     return s;
 * }
 *
 */
static int cmp_asc(const void *p, const void *q) {
    int a = *(const int*)p;
    int b = *(const int*)q;
    if (a < b) return -1;
    if (a > b) return 1;
    return 0;
}

static int cmp_desc(const void *p, const void *q) {
    int a = *(const int*)p;
    int b = *(const int*)q;
    if (a > b) return -1;
    if (a < b) return 1;
    return 0;
}

char* twoArrays(int k, int A_count, int* A, int B_count, int* B) {
    static char yes[] = "YES";
    static char no[]  = "NO";

    if (A_count != B_count) return no;

    qsort(A, A_count, sizeof(int), cmp_asc);
    qsort(B, B_count, sizeof(int), cmp_desc);

    for (int i = 0; i < A_count; ++i) {
        long long sum = (long long)A[i] + (long long)B[i];
        if (sum < k) return no;
    }

    return yes;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int q = parse_int(ltrim(rtrim(readline())));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        char** first_multiple_input = split_string(rtrim(readline()));

        int n = parse_int(*(first_multiple_input + 0));

        int k = parse_int(*(first_multiple_input + 1));

        char** A_temp = split_string(rtrim(readline()));

        int* A = malloc(n * sizeof(int));

        for (int i = 0; i < n; i++) {
            int A_item = parse_int(*(A_temp + i));

            *(A + i) = A_item;
        }

        char** B_temp = split_string(rtrim(readline()));

        int* B = malloc(n * sizeof(int));

        for (int i = 0; i < n; i++) {
            int B_item = parse_int(*(B_temp + i));

            *(B + i) = B_item;
        }

        char* result = twoArrays(k, n, A, n, B);

        fprintf(fptr, "%s\n", result);

        free(A);
        free(B);
        free(first_multiple_input);
        free(A_temp);
        free(B_temp);
    }

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);

        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
