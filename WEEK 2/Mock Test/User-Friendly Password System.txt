//User-Friendly Password System
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

#define P 131
#define M 1000000007

long long hashString(const char *s) {
    long long h = 0;
    int n = strlen(s);
    long long p_pow = 1;
    for (int i = n - 1; i >= 0; i--) {
        h = (h + ((long long)(s[i]) * p_pow) % M) % M;
        p_pow = (p_pow * P) % M;
    }
    return h;
}

int* authEvents(int events_rows, int events_columns, char*** events, int* result_count) {
    static char password[20];
    password[0] = '\0';
    long long currentHash = 0;

    *result_count = 0;
    int* results = malloc(events_rows * sizeof(int));

    for (int i = 0; i < events_rows; i++) {
        if (strcmp(events[i][0], "setPassword") == 0) {
            strcpy(password, events[i][1]);
            currentHash = hashString(password);
        } 
        else if (strcmp(events[i][0], "authorize") == 0) {
            long long x = atoll(events[i][1]);
            int auth = 0;
            if (x == currentHash) {
                auth = 1;
            } else {
                // Try appending any character (A-Z, a-z, 0-9)
                char temp[25];
                strcpy(temp, password);
                int len = strlen(password);
                for (int c = 0; c < 62 && !auth; c++) {
                    char ch;
                    if (c < 26) ch = 'A' + c;
                    else if (c < 52) ch = 'a' + (c - 26);
                    else ch = '0' + (c - 52);
                    temp[len] = ch;
                    temp[len + 1] = '\0';
                    if (hashString(temp) == x) {
                        auth = 1;
                        break;
                    }
                }
            }
            results[*result_count] = auth;
            (*result_count)++;
        }
    }
    return results;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int events_rows = parse_int(ltrim(rtrim(readline())));
    int events_columns = parse_int(ltrim(rtrim(readline())));

    char*** events = malloc(events_rows * sizeof(char**));

    for (int i = 0; i < events_rows; i++) {
        *(events + i) = malloc(events_columns * (sizeof(char*)));
        char** events_item_temp = split_string(rtrim(readline()));
        for (int j = 0; j < events_columns; j++) {
            char* events_item = *(events_item_temp + j);
            *(*(events + i) + j) = events_item;
        }
    }

    int result_count;
    int* result = authEvents(events_rows, events_columns, events, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d", *(result + i));
        if (i != result_count - 1) {
            fprintf(fptr, "\n");
        }
    }
    fprintf(fptr, "\n");
    fclose(fptr);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);
    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;
        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) {
            data = '\0';
            break;
        }
    }
    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);
        data[data_length] = '\0';
    }
    return data;
}

char* ltrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    while (*str != '\0' && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;
    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
