#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define MAX_Q 1000001

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    int Q;
    scanf("%d", &Q);
    char* S = (char*)malloc(sizeof(char));
    S[0] = '\0'; 
    char** history = (char**)malloc(MAX_Q * sizeof(char*));
    int history_top = -1;
    for (int i = 0; i < Q; i++) {
        int type;
        scanf("%d", &type);
        if (type == 1) {
            char W[1000001];
            scanf("%s", W);
            history_top++;
            history[history_top] = (char*)malloc((strlen(S) + 1) * sizeof(char));
            strcpy(history[history_top], S);
            S = (char*)realloc(S, (strlen(S) + strlen(W) + 1) * sizeof(char));
            strcat(S, W);
        } else if (type == 2) {
            int k;
            scanf("%d", &k);
            history_top++;
            history[history_top] = (char*)malloc((strlen(S) + 1) * sizeof(char));
            strcpy(history[history_top], S);
            int new_len = strlen(S) - k;
            if (new_len < 0) new_len = 0;
            S[new_len] = '\0';
            S = (char*)realloc(S, (new_len + 1) * sizeof(char));

        } else if (type == 3) {
            int k;
            scanf("%d", &k);
            printf("%c\n", S[k - 1]);
        } else if (type == 4) {
            if (history_top != -1) {
                        free(S);
                S = (char*)malloc((strlen(history[history_top]) + 1) * sizeof(char));
                strcpy(S, history[history_top]);
                free(history[history_top]);
                history_top--;
            }
        }
    }
    free(S);
    for(int i = 0; i <= history_top; i++){
        free(history[i]);
    }
    free(history);
    return 0;
}
